stages:
  - build:image
  - build
  - test

before_script:
  # - echo "Acquire::http::Proxy \"http://apt-cache.ni.dfki:8000\";" > /etc/apt/apt.conf.d/00proxy
  # - $CI_PROJECT_DIR/ci_scripts/install_deps.sh


#--------------UBUNTU BIONIC-----------------


build:image:bionic:
  stage: build:image
  # Works also with this image:
  # image: docker:19.03.12-dind # dind = Docker in docker
  # Problem: recreates the image every time, even if there are no changes (docker inside docker seemingly has no cached docker images, unlike the gitlab runner)
  tags:
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.bionic -f Dockerfile.bionic .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.bionic
  only:
    changes:
      - Dockerfile.bionic
      - .dockerignore


build:bionic:
  stage: build
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.bionic
  variables:
    VAR_BUILD_PATH: $CI_PROJECT_DIR/build/bionic
    VAR_INSTALL_PATH: $CI_PROJECT_DIR/install/bionic
  before_script:
    - export AROLIB_AROLIB_BUILD_PATH=$VAR_BUILD_PATH
    - export AROLIB_AROLIB_INSTALL_PATH=$VAR_INSTALL_PATH
  script:
    - make build
    - cp $CI_PROJECT_DIR/scripts/env_install_dir.sh $VAR_INSTALL_PATH
  tags:
    - docker
  artifacts:
    expire_in: 1 week # latest artifacts are always stored indefinitely, so this only applies to "old" ones
    when: on_success
    paths:
    - $VAR_INSTALL_PATH
    - $VAR_BUILD_PATH/build #needed for test (next stage)
    - $VAR_BUILD_PATH/bin #needed for test (next stage)


test:bionic:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.bionic
  tags:
    - docker
  variables:
    VAR_BUILD_PATH: $CI_PROJECT_DIR/build/bionic
    VAR_INSTALL_PATH: $CI_PROJECT_DIR/install/bionic
  before_script:
    - export AROLIB_AROLIB_BUILD_PATH=$VAR_BUILD_PATH
    - export AROLIB_AROLIB_INSTALL_PATH=$VAR_INSTALL_PATH
    - source $CI_PROJECT_DIR/scripts/env.sh
  script:
    - make test
  dependencies:
    - build:bionic

# test:units:
#   stage: test
#   image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
#   tags:
#     - docker
#   script:
#     - make test/units

# test:integration:
#   stage: test
#   image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
#   tags: 
#     - docker
#   script:
#     - make test/integration



#--------------UBUNTU FOCAL-----------------

build:image:focal:
  stage: build:image
  tags:
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.focal -f Dockerfile.focal .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.focal
  only:
    changes:
      - Dockerfile.focal
      - .dockerignore


build:focal:
  stage: build
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.focal
  variables:
    VAR_BUILD_PATH: $CI_PROJECT_DIR/build/focal
    VAR_INSTALL_PATH: $CI_PROJECT_DIR/install/focal
  before_script:
    - export AROLIB_AROLIB_BUILD_PATH=$VAR_BUILD_PATH
    - export AROLIB_AROLIB_INSTALL_PATH=$VAR_INSTALL_PATH
  script:
    - make build
    - cp $CI_PROJECT_DIR/scripts/env_install_dir.sh $VAR_INSTALL_PATH
  tags:
    - docker
  artifacts:
    expire_in: 1 week # latest artifacts are always stored indefinitely, so this only applies to "old" ones
    when: on_success
    paths:
    - $VAR_INSTALL_PATH
    - $VAR_BUILD_PATH/build #needed for test (next stage)
    - $VAR_BUILD_PATH/bin #needed for test (next stage)


test:focal:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH.focal
  tags:
    - docker
  variables:
    VAR_BUILD_PATH: $CI_PROJECT_DIR/build/focal
    VAR_INSTALL_PATH: $CI_PROJECT_DIR/install/focal
  before_script:
    - export AROLIB_AROLIB_BUILD_PATH=$VAR_BUILD_PATH
    - export AROLIB_AROLIB_INSTALL_PATH=$VAR_INSTALL_PATH
    - source $CI_PROJECT_DIR/scripts/env.sh
  script:
    - make test
  dependencies:
    - build:focal
